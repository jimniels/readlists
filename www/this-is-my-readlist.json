{
  "dateCreated": "2020-06-26T15:15:08.617Z",
  "dateModified": "2020-06-26T17:03:08.862Z",
  "title": "This is my readlist",
  "description": "",
  "articles": [
    {
      "title": "Musings on the Documentary “For Everyone”",
      "author": null,
      "date_published": null,
      "dek": null,
      "lead_image_url": "https://cdn.jim-nielsen.com/shared/twitter-card.jpg",
      "content": "<div class=\"markdown e-content\" id=\"js-post-content\"> <p>I recently watched the documentary <a href=\"http://www.foreveryone.net\">“For Everyone”</a>, which tells the story about Tim Berners Lee and the creation of the World Wide Web. </p>\n<p>There were a number of nuggets in this documentary, and I would recommend it to anyone who works on the web, but I wanted to capture a few small things that stood out to me.</p>\n<p>First, this was Tim Berners-Lee on his idea for the web:</p>\n<blockquote>\n<p>[I realized] I would have to create a system with common rules that would be acceptable to everyone. That meant as close as possible to no rules at all.</p>\n</blockquote>\n<p>It’s interesting to see how the ethos present in the person who birthed the web was instilled into online culture from the very beginning. Berners-Lee believed the web should be open and he gave away the protocols that powered it. There was no patent. No licensing around who can and can’t create a website. It was all put into the public domain. And that openness, in the very protocols of the web, has been a thorn in the foot of for-profit ventures ever since. </p>\n<p>I mean, just think about all that’s happened on the web around copyright infringement—Napster perhaps being the most prolific embodiment. If Berners-Lee had desired to make money off the web, that desire would’ve been built into the protocols and DNA of the web from the very beginning, likely resulting in a very different web than we have today—one where the likes of Napster would have never even existed because some form of centralized control would’ve been built in to the platform.</p>\n<p>But that’s not what Berners-Lee aspired to. He aspired to a system “for everyone”. </p>\n<p>The legacy that Berners-Lee left in the very DNA of the web, and continues to leave in his advocacy of the open web, is perhaps one of the most unrecognized treasures of the web: </p>\n<blockquote>\n<p>to figure out what you’re curious about and pursue it and enjoy when it has an impact on others...if you've done something interesting...and worry less about whose name is being inscribed where for having done it, that seems to me one of the gifts that Tim [Berners-Lee] is offering in the way which he has handled his own role in the explosion of the web.</p>\n</blockquote>\n<p>I think it’s pretty neat to see how the virtues espoused by advocates of “the open web” were all existent—In the Beginning—and embodied in the original creator of the World Wide Web.</p>\n<p>Thank you Tim.</p> </div>",
      "next_page_url": null,
      "url": "https://blog.jim-nielsen.com/2020/musings-on-the-documentary-for-everyone/",
      "domain": "blog.jim-nielsen.com",
      "excerpt": "I recently watched the documentary “For Everyone”, which tells the story about Tim Berners Lee and the creation of the World Wide Web. There were a number of nuggets in this documentary, and I would&hellip;",
      "word_count": 411,
      "direction": "ltr",
      "total_pages": 1,
      "rendered_pages": 1
    },
    {
      "title": "Introduction | Shape Up",
      "author": null,
      "date_published": null,
      "dek": null,
      "lead_image_url": null,
      "content": "<div class=\"content\"> <template><svg class=\"icon icon--link\" viewBox=\"0 0 85.69 85.69\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"m49.71 65.61c.78 0 1.25.14 1.42.42s0 .69-.59 1.25l-11.71 11.72a21.94 21.94 0 0 1 -16.07 6.69 21.94 21.94 0 0 1 -16.07-6.69 22.65 22.65 0 0 1 0-32.14l16.07-16.07a21.38 21.38 0 0 1 5.52-4 21.55 21.55 0 0 1 10.55-2.69h.33a26.68 26.68 0 0 1 8.37 1.67v.17a13.49 13.49 0 0 1 2.85 1.34 22.09 22.09 0 0 1 4.52 3.51 5.69 5.69 0 1 1 -8 8 11.31 11.31 0 0 0 -16.07 0l-16.1 16.11a11.3 11.3 0 0 0 0 16.06 10.92 10.92 0 0 0 8 3.35 10.92 10.92 0 0 0 8-3.35l6.53-6.52c.45-.45 1.62-.39 3.52.16a29.76 29.76 0 0 0 8.93 1.01zm13.22-65.61a21.94 21.94 0 0 1 16.07 6.69 21.94 21.94 0 0 1 6.69 16.07 21.92 21.92 0 0 1 -6.69 16.07l-16.07 16.07a22.23 22.23 0 0 1 -11.72 6.19c-.44.11-1 .22-1.5.33a14.75 14.75 0 0 1 -2.51.17 18.79 18.79 0 0 1 -2.51-.17c-1-.11-1.79-.22-2.35-.33-1-.22-1.67-.39-2-.5a22.66 22.66 0 0 1 -9.54-5.69 5.69 5.69 0 1 1 8-8 11.31 11.31 0 0 0 16.07 0l16.13-16.11a11 11 0 0 0 3.35-8 11 11 0 0 0 -3.35-8 11.3 11.3 0 0 0 -16.06 0l-6.7 6.69c-.45.45-1.62.39-3.51-.16a29.83 29.83 0 0 0 -8.87-1c-.79.11-1.26 0-1.43-.33s0-.78.59-1.34l11.84-11.96a21.92 21.92 0 0 1 16.07-6.69z\"></path></svg></template> <template><svg class=\"icon icon--twitter\" viewBox=\"0 0 101.53 82.49\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"m91 20.62a18.68 18.68 0 0 1 .19 2.58 58.44 58.44 0 0 1 -4 20.92 66.22 66.22 0 0 1 -11.2 19 53.33 53.33 0 0 1 -18.84 14 59.6 59.6 0 0 1 -25.28 5.35 58.34 58.34 0 0 1 -31.87-9.3c1.72.13 3.37.2 5 .2a40.78 40.78 0 0 0 26-8.92 19.07 19.07 0 0 1 -12-4.07 20.6 20.6 0 0 1 -7.3-10.38 20.75 20.75 0 0 0 4.16.4 26.41 26.41 0 0 0 5.95-.6 18.82 18.82 0 0 1 -11.2-7.24 21.21 21.21 0 0 1 -4.26-13.21v-.35c0 .79.89 1.42 2.67 1.88a22.14 22.14 0 0 0 5.65.7 25.41 25.41 0 0 1 -7.53-7.58 17.48 17.48 0 0 1 -3-9.71 21.19 21.19 0 0 1 2.8-10.52 59.45 59.45 0 0 0 19.14 15.46 57.54 57.54 0 0 0 23.92 6.35 19.39 19.39 0 0 1 -.59-4.76 20 20 0 0 1 6.11-14.67 20.84 20.84 0 0 1 29.94.39 44.74 44.74 0 0 0 13.29-4.95 20.48 20.48 0 0 1 -9.32 11.5 42.27 42.27 0 0 0 12.1-3.37 45.93 45.93 0 0 1 -10.53 10.9z\"></path></svg></template> <p>This book is a guide to how we do product development at Basecamp. It’s also a toolbox full of techniques that you can apply in your own way to your own process.</p> <p>Whether you’re a founder, CTO, product manager, designer, or developer, you’re probably here because of some common challenges that all software companies have to face.</p> <h2 id=\"growing-pains\">Growing pains</h2> <p>As software teams start to grow, some common struggles appear:</p> <ul> <li> <p>Team members feel like projects go on and on, with no end in sight.</p> </li> <li> <p>Product managers can’t find time to think strategically about the product.</p> </li> <li> <p>Founders ask themselves: “Why can’t we get features out the door like we used to in the early days?”</p> </li>\n</ul> <p>We saw these challenges first-hand at Basecamp as we grew from four people to over fifty.</p> <p>Basecamp started off in 2003 as a tool we built for ourselves. At the time we were a consultancy designing websites for clients. Information would get lost in the game of telephone between the client, the designer, and the person managing the project. We wanted Basecamp to be a centralized place where all parties could see the work, discuss it, and know what to do next. It turned out lots of companies had this “information slipping through the cracks” problem. Today millions of people across all kinds of industries rely on Basecamp as their shared source of truth.</p> <p>Three of us built the first version. Jason Fried, Basecamp’s founder, led the design. His co-founder, David Heinemeier Hansson, programmed it (and created the well-known web framework Ruby on Rails as a by-product). At the time I was a web designer with a focus on usability and user interfaces. I executed Jason’s design direction for key features of the app and collaborated with him to fill in details of the concept.</p> <p>From the first prototypes in July 2003 to launch in February 2004, David only worked ten hours a week. We knew we wouldn’t get anywhere with those ten hours of programming unless we used them very deliberately. Our intense focus on “hammering” the scope to fit within a given time budget was born under these constraints.</p> <p>As the business grew, I started widening my skills. Working with David and Ruby on Rails made the world of programming accessible to me. I learned the techniques programmers use to tame complexity: things like factoring, levels of abstraction, and separation of concerns. With one foot in the design world and one foot in the programming world, I wondered if we could apply these software development principles to the way we designed and managed the product.</p> <p>The first test of this idea came in 2009. By then we had hired a few more programmers and offered four separate software-as-a-service products. We wanted to bundle the products together into a seamless suite with single-sign-on and unified billing. It was a massive technical undertaking with treacherous user-facing flows. Besides getting the underlying architecture right, we had to interrupt customers on their way in to the product and make them change their username and password for reasons that weren’t easy to explain. I wore the designer and product manager hats on the project and prototyped the breadboarding and scope mapping techniques described in this book to manage the complexity.</p> <p>We had such good results that we decided to apply the same techniques again in 2012, when we redesigned Basecamp from scratch for version 2.0. Again there was a lot of surface area to manage and again the process was surprisingly smooth.</p> <p>By 2015, we had a core team that had lived through these experiences and hit an impressive stride. But we found it hard to articulate what we were doing to new hires. Our product team had quadrupled and everyone worked remotely. That made it hard to pass on our intuitions. We needed language to describe what we were doing and more structure to keep doing it at our new scale.</p> <p>To manage this new capacity, we switched from ad-hoc project lengths to repeating cycles. (It took some experimentation to find the right cycle length: six weeks. More on that later.) We formalized our pitching and betting processes. My role shifted again, from design and product management to product strategy. I needed new language, like the word “shaping”, to describe the up-front design work we did to set boundaries and reduce risks on projects before we committed them to teams.</p> <p>Just as we were getting better at articulating the way we work to ourselves, more and more of our friends and peers started coming to us to ask how we do it. Finally Jason pulled me aside one day and said, I think you should write a book about this.</p> <p>This is the result. You can think of this as two books in one. First, it’s a book of basic truths. I want it to give you better language to describe and deal with the risks, uncertainties, and challenges that come up whenever you do product development. Second, the book outlines the specific processes we’re using to make meaningful progress on our products at our current scale.</p> <p>Here’s a short overview of the main ideas in the book.</p> <h2 id=\"six-week-cycles\">Six-week cycles</h2> <p>First, we work in <strong>six-week cycles</strong>. Six weeks is long enough to build something meaningful start-to-finish and short enough that everyone can feel the deadline looming from the start, so they use the time wisely. The majority of our new features are built and released in one six-week cycle.</p> <p>Our decisions are based on moving the product forward in the next six weeks, not micromanaging time. We don’t count hours or question how individual days are spent. We don’t have daily meetings. We don’t rethink our roadmap every two weeks. Our focus is at a higher level. We say to ourselves: “If this project ships after six weeks, we’ll be really happy. We’ll feel our time was well spent.” Then we commit the six weeks and leave the team alone to get it done.</p> <h2 id=\"shaping-the-work\">Shaping the work</h2> <p>Second, we <strong>shape the work</strong> before giving it to a team. A small senior group works in parallel to the cycle teams. They define the key elements of a solution before we consider a project ready to bet on. Projects are defined at the right level of abstraction: concrete enough that the teams know what to do, yet abstract enough that they have room to work out the interesting details themselves.</p> <p>When shaping, we focus less on estimates and more on our <strong>appetite.</strong> Instead of asking how much time it will <em>take</em> to do some work, we ask: How much time do we want to <em>spend</em>? How much is this idea worth? This is the task of shaping: narrowing down the problem and designing the outline of a solution that fits within the constraints of our appetite.</p> <h2 id=\"making-teams-responsible\">Making teams responsible</h2> <p>Third, we <strong>give full responsibility</strong> to a small integrated team of designers and programmers. They define their own tasks, make adjustments to the scope, and work together to build vertical slices of the product one at a time. This is completely different from other methodologies, where managers chop up the work and programmers act like ticket-takers.</p> <p>Together, these concepts form a virtuous circle. When teams are more autonomous, senior people can spend less time managing them. With less time spent on management, senior people can shape up better projects. When projects are better shaped, teams have clearer boundaries and so can work more autonomously.</p> <h2 id=\"targeting-risk\">Targeting risk</h2> <p>At every step of the process we target a specific risk: the risk of not shipping on time. This book isn’t about the risk of building the wrong thing. Other books can help you with that (we recommend <a href=\"https://www.amazon.com/Competing-Against-Luck-Innovation-Customer/dp/0062435612\">Competing Against Luck</a>). Improving your discovery process should come after regaining your ability to ship. You can have the best strategy in the world, but if you can’t act on it, what good does it do?</p> <p>This book is about the risk of getting stuck, the risk of getting bogged down with last quarter’s work, wasting time on unexpected problems, and not being free to do what you want to do tomorrow.</p> <p>We reduce risk in the shaping process by solving open questions <em>before</em> we commit the project to a time box. We don’t give a project to a team that still has rabbit holes or tangled interdependencies.</p> <p>We reduce risk in the planning process by capping our bets to six weeks. If a project runs over, by default it doesn’t get an extension. This “circuit breaker” ensures that we don’t invest multiples of the original appetite on a concept that needs rethinking first.</p> <p>And lastly we reduce risk in the building process by integrating design and programming early. Instead of building lots of disconnected parts and hoping they’ll fit together in the 11th hour, we build one meaningful piece of the work end-to-end early on and then repeat. The team sequences the work from the most unknown to the least worrisome pieces and learns what works and what doesn’t by integrating as soon as possible.</p> <h2 id=\"how-this-book-is-organized\">How this book is organized</h2> <p>Part One is all about <strong>Shaping</strong> — the pre-work we do on projects before we consider them ready to schedule. Each chapter explains a specific step of the process, from setting the appetite on a raw idea, to sketching out a solution, to writing a pitch that presents the potential project. Along the way you’ll learn specific techniques — like breadboarding and fat-marker sketching — to keep the design at the right level of abstraction.</p> <p>Part Two is about <strong>Betting</strong> — how we choose among the pitched projects and decide what to do six weeks at a time.</p> <p>Part Three is about <strong>Building</strong> — the expectations we place on the teams and the special practices they use to discover what to do. We’ll look at how the teams figure out what to do, how they integrate design and programming, how they track what’s known versus unknown, and finally how they make the hard calls to finish the project on time.</p> <p>Lastly the Appendix gives you some help for when it’s time to make changes at your company. There’s some advice on how to try your first six-week experiment, tips on adjusting the methods to your company’s size, and specific guidance for how to implement Shape Up using Basecamp.</p> </div>",
      "next_page_url": null,
      "url": "https://basecamp.com/shapeup/0.3-chapter-01",
      "domain": "basecamp.com",
      "excerpt": "",
      "word_count": 1721,
      "direction": "ltr",
      "total_pages": 1,
      "rendered_pages": 1
    },
    {
      "title": "HTMLHRElement",
      "author": null,
      "date_published": null,
      "dek": null,
      "lead_image_url": "https://developer.mozilla.org/static/img/opengraph-logo.72382e605ce3.png",
      "content": "<div class=\"wiki-left-present content-layout\"><aside class=\"document-toc-container\"><section class=\"document-toc\"><header></header><ul><li><a href=\"#Properties\">Properties</a></li><li><a href=\"#Methods\">Methods</a></li><li><a href=\"#Specifications\">Specifications</a></li><li><a href=\"#Browser_compatibility\">Browser compatibility</a></li><li><a href=\"#See_also\">See also</a></li></ul></section></aside><article id=\"wikiArticle\"> <p>The <strong><code>HTMLHRElement</code></strong> interface provides special properties (beyond those of the <a href=\"/en-US/docs/Web/API/HTMLElement\"><code>HTMLElement</code></a> interface it also has available to it by inheritance) for manipulating <a href=\"/en-US/docs/Web/HTML/Element/hr\"><code>&lt;hr&gt;</code></a> elements.</p> <h2 id=\"Properties\">Properties</h2> <p><em>Inherits properties from its parent, <a href=\"/en-US/docs/Web/API/HTMLElement\"><code>HTMLElement</code></a>.</em></p> <dl> <dt><a class=\"new\" href=\"/en-US/docs/Web/API/HTMLHRElement/align\"><code>HTMLHRElement.align</code></a> <span class=\"icon-only-inline\"><i class=\"icon-trash\"> </i></span></dt> <dd>Is a <a href=\"/en-US/docs/Web/API/DOMString\"><code>DOMString</code></a>, an enumerated attribute indicating alignment of the rule with respect to the surrounding context.</dd> <dt><a class=\"new\" href=\"/en-US/docs/Web/API/HTMLHRElement/color\"><code>HTMLHRElement.color</code></a> <span class=\"icon-only-inline\"><i class=\"icon-trash\"> </i></span></dt> <dd>Is a <a href=\"/en-US/docs/Web/API/DOMString\"><code>DOMString</code></a> representing the name of the color of the rule.</dd> <dt><a class=\"new\" href=\"/en-US/docs/Web/API/HTMLHRElement/noshade\"><code>HTMLHRElement.noshade</code></a> <span class=\"icon-only-inline\"><i class=\"icon-trash\"> </i></span></dt> <dd>Is a <a href=\"/en-US/docs/Web/API/Boolean\"><code>Boolean</code></a> that sets the rule to have no shading.</dd> <dt><a class=\"new\" href=\"/en-US/docs/Web/API/HTMLHRElement/size\"><code>HTMLHRElement.size</code></a> <span class=\"icon-only-inline\"><i class=\"icon-trash\"> </i></span></dt> <dd>Is a <a href=\"/en-US/docs/Web/API/DOMString\"><code>DOMString</code></a> representing the height of the rule.</dd> <dt><a class=\"new\" href=\"/en-US/docs/Web/API/HTMLHRElement/width\"><code>HTMLHRElement.width</code></a> <span class=\"icon-only-inline\"><i class=\"icon-trash\"> </i></span></dt> <dd>Is a <a href=\"/en-US/docs/Web/API/DOMString\"><code>DOMString</code></a> representing the width of the rule on the page.</dd>\n</dl> <h2 id=\"Methods\">Methods</h2> <p><em>No specific method; inherits methods from its parent, <a href=\"/en-US/docs/Web/API/HTMLElement\"><code>HTMLElement</code></a></em>.</p> <h2 id=\"Specifications\">Specifications</h2> <h2 id=\"Browser_compatibility\">Browser compatibility</h2> <div> <div class=\"bc-data\" id=\"bcd:api.HTMLHRElement\"><a class=\"bc-github-link external\" href=\"https://github.com/mdn/browser-compat-data\">Update compatibility data on GitHub</a><table class=\"bc-table bc-table-web\"><thead><tr class=\"bc-platforms\"><td></td><th class=\"bc-platform-desktop\"><span>Desktop</span></th><th class=\"bc-platform-mobile\"><span>Mobile</span></th></tr><tr class=\"bc-browsers\"><td></td><th class=\"bc-browser-chrome\"><span class=\"bc-head-txt-label bc-head-icon-chrome\">Chrome</span></th><th class=\"bc-browser-edge\"><span class=\"bc-head-txt-label bc-head-icon-edge\">Edge</span></th><th class=\"bc-browser-firefox\"><span class=\"bc-head-txt-label bc-head-icon-firefox\">Firefox</span></th><th class=\"bc-browser-ie\"><span class=\"bc-head-txt-label bc-head-icon-ie\">Internet Explorer</span></th><th class=\"bc-browser-opera\"><span class=\"bc-head-txt-label bc-head-icon-opera\">Opera</span></th><th class=\"bc-browser-safari\"><span class=\"bc-head-txt-label bc-head-icon-safari\">Safari</span></th><th class=\"bc-browser-webview_android\"><span class=\"bc-head-txt-label bc-head-icon-webview_android\">Android webview</span></th><th class=\"bc-browser-chrome_android\"><span class=\"bc-head-txt-label bc-head-icon-chrome_android\">Chrome for Android</span></th><th class=\"bc-browser-firefox_android\"><span class=\"bc-head-txt-label bc-head-icon-firefox_android\">Firefox for Android</span></th><th class=\"bc-browser-opera_android\"><span class=\"bc-head-txt-label bc-head-icon-opera_android\">Opera for Android</span></th><th class=\"bc-browser-safari_ios\"><span class=\"bc-head-txt-label bc-head-icon-safari_ios\">Safari on iOS</span></th><th class=\"bc-browser-samsunginternet_android\"><span class=\"bc-head-txt-label bc-head-icon-samsunginternet_android\">Samsung Internet</span></th></tr></thead><tbody><tr><th><code>HTMLHRElement</code></th><td class=\"bc-supports-yes bc-browser-chrome\"><span class=\"bc-browser-name\">Chrome</span><abbr class=\"bc-level-yes only-icon\"> <span>Full support</span> </abbr> Yes</td><td class=\"bc-supports-yes bc-browser-edge\"><span class=\"bc-browser-name\">Edge</span><abbr class=\"bc-level-yes only-icon\"> <span>Full support</span> </abbr> 12</td><td class=\"bc-supports-yes bc-browser-firefox\"><span class=\"bc-browser-name\">Firefox</span><abbr class=\"bc-level-yes only-icon\"> <span>Full support</span> </abbr> 1</td><td class=\"bc-supports-yes bc-browser-ie\"><span class=\"bc-browser-name\">IE</span><abbr class=\"bc-level-yes only-icon\"> <span>Full support</span> </abbr> Yes</td><td class=\"bc-supports-yes bc-browser-opera\"><span class=\"bc-browser-name\">Opera</span><abbr class=\"bc-level-yes only-icon\"> <span>Full support</span> </abbr> Yes</td><td class=\"bc-supports-yes bc-browser-safari\"><span class=\"bc-browser-name\">Safari</span><abbr class=\"bc-level-yes only-icon\"> <span>Full support</span> </abbr> Yes</td><td class=\"bc-supports-yes bc-browser-webview_android\"><span class=\"bc-browser-name\">WebView Android</span><abbr class=\"bc-level-yes only-icon\"> <span>Full support</span> </abbr> Yes</td><td class=\"bc-supports-yes bc-browser-chrome_android\"><span class=\"bc-browser-name\">Chrome Android</span><abbr class=\"bc-level-yes only-icon\"> <span>Full support</span> </abbr> Yes</td><td class=\"bc-supports-yes bc-browser-firefox_android\"><span class=\"bc-browser-name\">Firefox Android</span><abbr class=\"bc-level-yes only-icon\"> <span>Full support</span> </abbr> Yes</td><td class=\"bc-supports-yes bc-browser-opera_android\"><span class=\"bc-browser-name\">Opera Android</span><abbr class=\"bc-level-yes only-icon\"> <span>Full support</span> </abbr> Yes</td><td class=\"bc-supports-yes bc-browser-safari_ios\"><span class=\"bc-browser-name\">Safari iOS</span><abbr class=\"bc-level-yes only-icon\"> <span>Full support</span> </abbr> Yes</td><td class=\"bc-supports-yes bc-browser-samsunginternet_android\"><span class=\"bc-browser-name\">Samsung Internet Android</span><abbr class=\"bc-level-yes only-icon\"> <span>Full support</span> </abbr> Yes</td></tr></tbody></table><section class=\"bc-legend\" id=\"sect1\"><dl><dt><span class=\"bc-supports-yes bc-supports\"> <abbr class=\"bc-level bc-level-yes only-icon\"> <span>Full support</span> &nbsp; </abbr></span></dt><dd>Full support</dd></dl></section></div>\n</div> <h2 id=\"See_also\">See also</h2> <ul> <li>The HTML element implementing this interface: <a href=\"/en-US/docs/Web/HTML/Element/hr\"><code>&lt;hr&gt;</code></a></li>\n</ul></article></div>",
      "next_page_url": null,
      "url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLHRElement",
      "domain": "developer.mozilla.org",
      "excerpt": "The HTMLHRElement interface provides special properties (beyond those of the HTMLElement interface it also has available to it by inheritance) for manipulating hr elements.",
      "word_count": 185,
      "direction": "ltr",
      "total_pages": 1,
      "rendered_pages": 1
    }
  ]
}
